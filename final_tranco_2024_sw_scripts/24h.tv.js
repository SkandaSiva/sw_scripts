importScripts('swenv.js');

// Set this to true for production
const doCache = false;

// Name our cache
const CACHE_NAME = '24tv-pwa-cache-v1';

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys()
            .then(keyList =>
                Promise.all(keyList.map(key => {
                    if (!cacheWhitelist.includes(key)) {
                        console.log('Deleting cache: ' + key)
                        return caches.delete(key);
                    }
                }))
            )
    );
});

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function(event) {
    if (doCache) {
        event.waitUntil(
            caches.open(CACHE_NAME)
                .then(function(cache) {
                    // Get the assets manifest so we can see what our js file is named
                    // This is because webpack hashes it
                    fetch('images/' + process.env.VITE_IMAGE_PREFIX + '/manifest.json')
                        .then(response => {
                            response.json()
                        })
                        .then(assets => {
                            // Open a cache and cache our files
                            // We want to cache the page and the main.js generated by webpack
                            // We could also cache any static assets like CSS or images
                            const urlsToCache = [
                                "/",
                                assets
                                //assets["main.js"]
                            ]
                            cache.addAll(urlsToCache)
                            console.log('cached');
                        })
                })
        );
    }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event) {
    if (doCache) {
        event.respondWith(
            caches.match(event.request).then(function(response) {
                return response/* || fetch(event.request)*/;
            })
        );
    }
});

self.addEventListener('push', function(event) {
    //console.log(self.Notification)
    // self.Notification.requestPermission().then(res=>console.log(res))

    if(self.Notification.permission === 'denied'){
        console.log("Permission wan't granted")
        return;
    }

    if(self.Notification.permission === 'default'){
        console.log("The permission request was dismissed")
        return;
    }

    console.log("The permission request was granted!", event)

    /*try {
        const data = event.data.json();
        const options = {
            title: data.notification.title,
            body: data.notification.body,
            icon: data.notification.image || 'images/' + process.env.VITE_IMAGE_PREFIX + '/maskable_icon_x96.png',
            badge: data.notification.image || 'images/' + process.env.VITE_IMAGE_PREFIX + '/maskable_icon_x96.png',
            data: {
                url: data.openUrl,
                click_action: data.notification.click_action
            }
        }

        console.log('!!! notification', data);

        event.waitUntil(
            self.registration.showNotification(data.title || data.notification.title, options)
        );
    } catch(err) {
        //throw new Error(`Error in SW: ${e}`);
        console.log('Error in SW', event, err);
    }*/
})
