const OFFLINE_VERSION=20221110,CACHE_NAME="offline_v"+OFFLINE_VERSION,OFFLINE_URL="/offline.html",DEBUG=!0,precachedAssets=["/assets/fonts/poppins-v20-latin-ext_latin-regular.woff2","/assets/fonts/poppins-v20-latin-ext_latin-500.woff2","/assets/fonts/poppins-v20-latin-ext_latin-600.woff2","/assets/fonts/poppins-v20-latin-ext_latin-700.woff2","/assets/fonts/fa-regular-400.woff2","/assets/fonts/boxicons.woff2","/assets/fonts/fa-solid-900.woff2"],deleteCache=async n=>{DEBUG&&self.console.log("[SW] Deleting cache ",n),await caches.delete(n)},deleteOldCaches=async()=>{const n=[CACHE_NAME],t=await caches.keys(),i=t.filter(t=>!n.includes(t));await Promise.all(i.map(deleteCache))},addResourcesToCache=async n=>{const t=await caches.open(CACHE_NAME);await t.add(new Request(OFFLINE_URL,{cache:"reload"}));await t.addAll(n.map(n=>new Request(n,{cache:"reload"})))};self.addEventListener("install",n=>{self.skipWaiting(),n.waitUntil(addResourcesToCache(precachedAssets))});self.addEventListener("activate",n=>{n.waitUntil((async()=>{await deleteOldCaches(),"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable()})()),self.clients.claim()});self.addEventListener("fetch",n=>{if(n.cache!=="only-if-cached"||n.mode==="same-origin")if(n.request.mode==="navigate")n.respondWith((async()=>{try{const t=await n.preloadResponse;if(t)return t;return await fetch(n.request)}catch(t){self.console.log("Fetch failed; returning offline page instead.",t);const i=await caches.open(CACHE_NAME),n=await i.match(OFFLINE_URL);return n?n:new Response("<html><body>Network error happened<\/body>/<html>",{status:408,headers:{"Content-Type":"text/html"}})}})());else if(n.request.method==="GET"){const t=new URL(n.request.url),i=precachedAssets.includes(t.pathname),r=n.request.destination==="font",f=t.origin==location.origin;if(f&&(i||r))try{if(i){DEBUG&&self.console.log("[SW] Preloaded resource found ",n.request.url);n.respondWith((async()=>{const t=await caches.open(CACHE_NAME),i=await t.match(n.request);return DEBUG&&typeof cashedItem!="undefined"&&cashedItem!==null&&console.log("[SW] Preloaded resource cache hit"),i})());return}r&&(DEBUG&&self.console.log("[SW] Font: ",n.request.url),n.respondWith((async()=>{const i=await caches.open(CACHE_NAME),t=await i.match(n.request),r=fetch(n.request.clone());return DEBUG&&typeof t!="undefined"&&t!==null&&self.console.log("[SW] Font cache hit ",n.request.url),r.then(t=>{t.status<400&&t.headers.has("content-type")&&t.headers.get("content-type").match(/^font\//i)?(DEBUG&&self.console.log("[SW] Font updated ",n.request.url),i.put(n.request,t.clone())):DEBUG&&self.console.log("[SW] Font not cached due to status ",t.status)}),t||r})()))}catch(u){DEBUG&&self.console.error("[SW] Error in fetch handler:",u);throw u;}return}})