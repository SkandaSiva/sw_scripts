const CACHE="pwabuilder-adv-cache";const precacheFiles=[];const offlineFallbackPage="offline.html";const networkFirstPaths=["/"];const avoidCachingPaths=["/"];function pathComparer(requestUrl,pathRegEx){return requestUrl.match(new RegExp(pathRegEx));}function comparePaths(requestUrl,pathsArray){if(requestUrl){for(let index=0;index<pathsArray.length;index++){const pathRegEx=pathsArray[index];if(pathComparer(requestUrl,pathRegEx)){return true;}}}return false;}self.addEventListener("install",function(event){console.log("Install Event processing");console.log("Skip waiting on install");self.skipWaiting();event.waitUntil(caches.open(CACHE).then(function(cache){console.log("Caching pages during install");return cache.addAll(precacheFiles).then(function(){return cache.add(offlineFallbackPage);});}));});self.addEventListener("activate",function(event){console.log("Claiming clients for current page");event.waitUntil(self.clients.claim());});self.addEventListener("fetch",function(event){if(event.request.method!=="GET")return;if(comparePaths(event.request.url,networkFirstPaths)){networkFirstFetch(event);}else{cacheFirstFetch(event);}});function cacheFirstFetch(event){event.respondWith(fromCache(event.request).then(function(response){event.waitUntil(fetch(event.request).then(function(response){return updateCache(event.request,response);}));return response;},function(){return fetch(event.request).then(function(response){event.waitUntil(updateCache(event.request,response.clone()));return response;}).catch(function(error){if(event.request.destination!=="document"||event.request.mode!=="navigate"){return;}console.log("Network request failed and no cache."+error);return caches.open(CACHE).then(function(cache){cache.match(offlineFallbackPage);});});}));}function networkFirstFetch(event){event.respondWith(fetch(event.request).then(function(response){event.waitUntil(updateCache(event.request,response.clone()));return response;}).catch(function(error){console.log("Network request Failed. Serving content from cache: "+error);return fromCache(event.request);}));}function fromCache(request){return caches.open(CACHE).then(function(cache){return cache.match(request).then(function(matching){if(!matching||matching.status===404){return Promise.reject("no-match");}return matching;});});}function updateCache(request,response){if(!comparePaths(request.url,avoidCachingPaths)){return caches.open(CACHE).then(function(cache){return cache.put(request,response);});}return Promise.resolve();}