var urlcurrent = "", WebsiteCode = "gczuyv", WebsiteName = "jpmcbly.co.in"; "granted" === Notification.permission ? checknotificationcode() : "denied" === Notification.permission || callnotification(); const firebaseVersion = "8.9.1"; async function callnotification() { urlcurrent = window.location.href; try { let e = await fetch("https://push.gcte.in/api/User/checknotificationcode", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ WebsiteCode: WebsiteCode, WebsiteName: WebsiteName }) }), i = await e.json(); if (null != i) { if (1 == i.Ispopup) { var t = getOperatingSystem(); openpoup(i) } else openpoup2(i), notificationdata(i) } } catch (n) { } } async function checknotificationcode() { try { let e = await fetch("https://push.gcte.in/api/User/checknotificationcode", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ WebsiteCode: WebsiteCode, WebsiteName: WebsiteName }) }), i = await e.json(); notificationdata(i) } catch (t) { } } function opennotification() { checknotificationcode(), document.getElementById("ModalNotification").innerHTML = "" } function isMobileDevice() { return /Mobi/i.test(navigator.userAgent) } function getBrowser() { var e = navigator.userAgent; if (e.indexOf("Firefox") > -1) return "Mozilla Firefox"; if (e.indexOf("Chrome") > -1) return "Google Chrome"; if (e.indexOf("Safari") > -1) return "Apple Safari"; if (e.indexOf("Opera") > -1 || e.indexOf("OPR") > -1) return "Opera"; if (e.indexOf("Edge") > -1 || e.indexOf("Edg") > -1) return "Microsoft Edge"; else if (e.indexOf("Trident") > -1) return "Internet Explorer"; else return "Unknown" } function getOperatingSystem() { var e = navigator.userAgent; if (-1 !== e.indexOf("Win")) return "Windows"; if (-1 !== e.indexOf("Android")) return "Android"; if (-1 !== e.indexOf("Mac")) return "MacOS"; if (-1 !== e.indexOf("Linux")) return "Linux"; if (-1 !== e.indexOf("iOS")) return "iOS"; else return "Unknown" } async function notificationupdate(e, i, t, n) { try { let a = await fetch("https://api.ipinfodb.com/v3/ip-city/?key=ee8b2815903c4b76b44daab5b4848ce16df85fb2233c8dfaf9b7104a72fd89fc&format=json", { method: "GET" }), o = await a.json(); updatenotification2(o, e, i, t, n) } catch (s) { } } async function updatenotification2(e, i, t, n, a) { var o = JSON.stringify(await (await navigator.serviceWorker.ready).pushManager.subscribe({ userVisibleOnly: !0, applicationServerKey: a })); o = JSON.parse(o); var s = ""; s = isMobileDevice() ? "Mobile" : "Desktop"; var r = getBrowser(), c = getOperatingSystem(), d = e.ipAddress, p = e.countryCode, u = e.countryName, l = e.regionName, f = e.cityName, g = e.zipCode, b = e.latitude, m = e.longitude, h = e.timeZone; let y = { WebsiteCode: WebsiteCode, Token: i, DeviceName: s, BrowserName: r, OperatingSystem: c, IPAddress: d, CountryCode: p, CountryName: u, RegionName: l, CityName: f, ZipCode: g, Latitude: b, Longitude: m, TimeZone: h, CurrentPage: t, PageType: n, EndpointURL: o.endpoint, P256dh: o.keys.p256dh, Auth: o.keys.auth }; try { let k = await fetch("https://push.gcte.in/api/User/SendToken", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(y) }); await k.json() } catch (S) { } } function openmypushNewWindow() { window.open("https://gcte.in", "_blank") } function openpoup2(e) { var i = e.PushRocketPopup; document.body.insertAdjacentHTML("afterbegin", i) } function openpoup(e) { document.body.insertAdjacentHTML("afterbegin", '<div id="ModalNotification"></div>'); var i = document.getElementById("ModalNotification"); i.innerHTML = ""; var t = e.AlertPopup; i.innerHTML = t } function notificationdata(e) { let i = { firebaseConfig: { apiKey: e.APIKey, authDomain: e.AuthDomain, projectId: e.ProjectId, storageBucket: e.StorageBucket, messagingSenderId: e.MessagingSenderId, appId: e.AppId, measurementId: e.MeasurementId }, vapid_public_key: e.VapId_Public_Key }; firebase.initializeApp({ ...i.firebaseConfig }); let t = firebase.messaging(); t.requestPermission().then(function () { console.log("granted"), t.getToken().then(i => { i ? notificationupdate(i, urlcurrent, "Website", e.VapId_Public_Key) : console.log("No Instance ID token available. Request permission to generate one.") }).catch(e => { console.log("An error occurred while retrieving token. ", e) }) }), self.addEventListener("activate", function (e) { e.waitUntil(clients.claim()) }), self.addEventListener("install", function (e) { self.skipWaiting() }) } importScripts("https://www.gstatic.com/firebasejs/" + firebaseVersion + "/firebase-app.js"), importScripts("https://www.gstatic.com/firebasejs/" + firebaseVersion + "/firebase-messaging.js"); const WorkerMessengerCommand = { AMP_SUBSCRIPTION_STATE: "amp-web-push-subscription-state", AMP_SUBSCRIBE: "amp-web-push-subscribe", AMP_UNSUBSCRIBE: "amp-web-push-unsubscribe" }; async function callnotification_amp() { try { let e = await fetch("https://push.gcte.in/api/User/checknotificationcode", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ WebsiteCode: WebsiteCode, WebsiteName: WebsiteName }) }), i = await e.json(); if (null != i) { if (1 == i.Ispopup) { var t = getOperatingSystem(); notificationdata_amp(i) } else notificationdata_amp(i) } } catch (n) { } } async function checknotificationcode_amp(e) { try { let i = await fetch("https://push.gcte.in/api/User/checknotificationcode", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ WebsiteCode: WebsiteCode, WebsiteName: WebsiteName }) }), t = await i.json(); notificationdata_amp(t, e) } catch (n) { } } function notificationdata_amp(e, i) { let t = { firebaseConfig: { apiKey: e.APIKey, authDomain: e.AuthDomain, projectId: e.ProjectId, storageBucket: e.StorageBucket, messagingSenderId: e.MessagingSenderId, appId: e.AppId, measurementId: e.MeasurementId }, vapid_public_key: e.VapId_Public_Key }; firebase.initializeApp({ ...t.firebaseConfig }), self.registration.pushManager.subscribe({ userVisibleOnly: !0, applicationServerKey: t.vapid_public_key }).then(async () => { broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIBE, null); var e = await registration.pushManager.getSubscription(); e = e.toJSON(), null == firebase.messaging().vapidKey && firebase.messaging().usePublicVapidKey(t.vapid_public_key); let n = firebase.messaging(), a = await n.getToken({ serviceWorkerRegistration: self.registration }); notificationupdate(a, i, "AMP", t.vapid_public_key) }) } function onMessageReceivedSubscribe(e) { "granted" === Notification.permission ? checknotificationcode_amp(e) : "denied" === Notification.permission || callnotification_amp(e) } function onMessageReceivedSubscriptionState() { let e = null; self.registration.pushManager.getSubscription().then(i => (e = i, i) ? self.registration.pushManager.permissionState(i.options) : null).then(i => { if (null == i) broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE, !1); else { let t = !!e && "granted" === i; broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE, t) } }) } function onMessageReceivedUnsubscribe() { self.registration.pushManager.getSubscription().then(e => e.unsubscribe()).then(() => { broadcastReply(WorkerMessengerCommand.AMP_UNSUBSCRIBE, null) }) } function broadcastReply(e, i) { self.clients.matchAll().then(t => { for (let n = 0; n < t.length; n++) { let a = t[n]; a.postMessage({ command: e, payload: i }) } }) } async function clicknotification(e, i, t) { try { let n = await fetch("https://push.gcte.in/api/User/ClickNotification", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ UniqueId: e, ClickOn: i, MessageClickId: t }) }); await n.json() } catch (a) { } } self.addEventListener("message", e => { let { command: i, url: t } = e.data; switch (i) { case WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE: onMessageReceivedSubscriptionState(); break; case WorkerMessengerCommand.AMP_SUBSCRIBE: onMessageReceivedSubscribe(t); break; case WorkerMessengerCommand.AMP_UNSUBSCRIBE: onMessageReceivedUnsubscribe() } }), self.addEventListener("push", function (e) { try { let i = e.data.json(); i.type; var t = i.actions; if ("" != t[1].title) { var n = t[0].action, a = t[0].title, o = t[0].icon, s = t[0].url, r = t[1].action, c = t[1].title, d = t[1].icon, p = t[1].url; e.waitUntil(self.registration.showNotification(i.title, { body: i.body, icon: i.icon, image: i.image, tag: i.tag, badge: i.badge, actions: [{ action: n, title: a, icon: o, url: s }, { action: r, title: c, icon: d, url: p }], data: { url: i.url, url2: s, url3: p, fcmMessageId: "" } })) } else if ("" != t[0].title) { var n = t[0].action, a = t[0].title, o = t[0].icon, s = t[0].url; e.waitUntil(self.registration.showNotification(i.title, { body: i.body, icon: i.icon, image: i.image, tag: i.tag, badge: i.badge, actions: [{ action: n, title: a, icon: o, url: s }], data: { url: i.url, url2: s, fcmMessageId: "" } })) } else e.waitUntil(self.registration.showNotification(i.title, { body: i.body, icon: i.icon, image: i.image, tag: i.tag, badge: i.badge, data: { url: i.url, fcmMessageId: "" } })); self.registration.update() } catch (u) { console.log(u) } }), self.addEventListener("notificationclose", function (e) { e.notification.close() }), self.addEventListener("notificationclick", function (e) { e.notification.close(); var i = e.notification.tag; switch (e.action) { case "action1": var t = e.notification.data.fcmMessageId; console.log("Action 1 clicked"), clicknotification(i, "Button 1", t), "" != e.notification.data.url2 && self.clients.openWindow(e.notification.data.url2); break; case "action2": var t = e.notification.data.fcmMessageId; clicknotification(i, "Button 2", t), console.log("Action 2 clicked"), "" != e.notification.data.url3 && self.clients.openWindow(e.notification.data.url3); break; default: var t = e.notification.data.fcmMessageId; console.log("Notification clicked"), clicknotification(i, "Page", t), "" != e.notification.data.url && self.clients.openWindow(e.notification.data.url) } });