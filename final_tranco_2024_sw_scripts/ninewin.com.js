const OFFLINE_VERSION=1.2,CACHE_NAME="offline",OFFLINE_URL="offline.html",TIMEOUT=5e3,IS_LOCALHOST="localhost"===self.location.hostname,fetchImg=()=>fetch(`${self.location.protocol}//${self.location.host}/dot.png?t=${Date.now()}`),timeoutReject=()=>new Promise(((t,e)=>setTimeout((()=>e(new Error("Request timed out"))),5e3))),STATUS=[200,304,403],FONTS_URL="https://fonts.googleapis.com/css2?family=Montserrat:wght@500;600;700&display=swap",IDB_URL="https://cdn.jsdelivr.net/npm/idb-keyval@6/+esm",CACHE=[IDB_URL,FONTS_URL];try{self.importScripts("https://cdn.jsdelivr.net/npm/idb-keyval@6/dist/umd.js")}catch{}self.addEventListener("install",(t=>{t.waitUntil((async()=>{const t=await caches.open("offline");await t.addAll(CACHE),await t.add(new Request(OFFLINE_URL,{cache:"reload"}))})()),self.skipWaiting()})),self.addEventListener("activate",(t=>{t.waitUntil((async()=>{"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable()})()),clients.claim()})),self.addEventListener("fetch",(t=>{"navigate"===t.request.mode&&"GET"===t.request.method&&t.respondWith((async()=>{try{if(!IS_LOCALHOST){const{status:t=0}=await Promise.race([fetchImg(),timeoutReject()]);if(!STATUS.includes(t))throw"blocked domain"}const e=await t.preloadResponse;if(e)return e;return await fetch(t.request)}catch(e){const[a]=await Promise.all([idbKeyval.get("REDIRECT_TIME")]);if(!a||Date.now()-a>15e3){const t=await caches.open("offline");return await t.match(OFFLINE_URL)}return fetch(t.request)}})())}));