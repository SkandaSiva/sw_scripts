const cacheName="offline",staticsCacheOnly=!1,OFFLINE_PAGE="offline.html";let supportsResponseBodyStream;function canConstructResponseFromBodyStream(){if(void 0===supportsResponseBodyStream){const e=new Response("");if("body"in e)try{new Response(e.body),supportsResponseBodyStream=!0}catch(e){supportsResponseBodyStream=!1}supportsResponseBodyStream=!1}return supportsResponseBodyStream}const copyResponse=async function(e){const t=e.clone(),s={headers:new Headers(t.headers),status:t.status,statusText:t.statusText},a=canConstructResponseFromBodyStream()?t.body:await t.blob();return new Response(a,s)};self.addEventListener("activate",(async e=>{const t=(await caches.keys()).filter((e=>"offline"!==e));await Promise.all(t.map((e=>caches.delete(e)))),self.clients.claim()})),self.addEventListener("install",(e=>{e.waitUntil((async()=>{const e=await caches.open("offline");await e.add(new Request(OFFLINE_PAGE,{cache:"reload"}))})())})),self.addEventListener("fetch",(e=>{"navigate"===e.request.mode&&e.respondWith((async()=>{try{const t=await e.preloadResponse;if(t)return t;return await fetch(e.request)}catch(e){false;const t=await caches.open("offline"),s=await t.match(OFFLINE_PAGE);return copyResponse(s)}})())})),self.addEventListener("fetch",(e=>{if(-1!==e.request.url.indexOf("/photos"))return!1;"navigate"!==e.request.mode&&e.respondWith((async()=>{const t=await caches.open("offline"),s=await t.match(e.request);if(s)return s;return await fetch(e.request)})())}));