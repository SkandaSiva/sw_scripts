 'use strict'; importScripts('https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js'); const { registerRoute, NavigationRoute } = workbox.routing; const { CacheFirst, NetworkOnly, NetworkFirst, StaleWhileRevalidate } = workbox.strategies; const { CacheableResponsePlugin } = workbox.cacheableResponse; const { ExpirationPlugin } = workbox.expiration; const OFFLINE_PAGE_URL = 'https://www.oficialfarma.com.br/offline'; const OFFLINE_CACHE_NAME = 'sw-1731076304-offline'; const PREFIX_CACHE_NAME = 'sw-1731076304-'; const CUSTOM_STRATEGIES = [{"path":"\/checkout\/","strategy":"NetworkOnly","name_cache":"checkout"},{"path":"\/customer\/","strategy":"NetworkOnly","name_cache":"customer"},{"path":"\/admin\/","strategy":"NetworkOnly","name_cache":"admin"},{"path":"\/backofficesup\/","strategy":"NetworkOnly","name_cache":"backofficesup"}]; self.addEventListener('install', (event) => { event.waitUntil( caches .open(OFFLINE_CACHE_NAME) .then((cache) => cache.add(OFFLINE_PAGE_URL)) ); }); self.addEventListener('activate', event => { event.waitUntil(self.clients.claim()); event.waitUntil(self.caches.keys().then((keys) => { return Promise.all(keys.map((key) => { if (!key.includes(PREFIX_CACHE_NAME)) { return caches.delete(key); } })); })); }); workbox.navigationPreload.enable(); const assetsPlugins = [ new ExpirationPlugin({ maxEntries: 500, maxAgeSeconds: 360 * 24 * 60 * 60, purgeOnQuotaError: true, matchOptions: { ignoreVary: true, }, }), new CacheableResponsePlugin({ statuses: [0, 200], }) ]; registerRoute( /\.(?:css)$/, new CacheFirst({ cacheName: PREFIX_CACHE_NAME + 'styles-cache', plugins: assetsPlugins }) ); registerRoute( /\.(?:js)$/, new CacheFirst({ cacheName: PREFIX_CACHE_NAME + 'scripts-cache', plugins: assetsPlugins }) ); registerRoute( /\.(?:json)$/, new CacheFirst({ cacheName: PREFIX_CACHE_NAME + 'json-cache', plugins: assetsPlugins }) ); registerRoute( /\.(?:ttf|woff2)$/, new CacheFirst({ cacheName: PREFIX_CACHE_NAME + 'fonts-cache', plugins: assetsPlugins }) ); registerRoute( /\.(?:png|webp|gif|jpg|jpeg|avif|svg)$/, new CacheFirst({ cacheName: PREFIX_CACHE_NAME + 'images-cache', plugins: assetsPlugins }) ); registerRoute( new RegExp('^https://(?:fonts\\.googleapis\\.com|fonts\\.gstatic\\.com)'), new StaleWhileRevalidate({ cacheName: PREFIX_CACHE_NAME + 'fonts-cdn-cache', plugins: assetsPlugins }) ); const customStrategiesPlugins = [ new ExpirationPlugin({ maxEntries: 500, maxAgeSeconds: 120 * 24 * 60 * 60, purgeOnQuotaError: true, matchOptions: { ignoreVary: true, }, }), new CacheableResponsePlugin({ statuses: [0, 200], }) ]; for (let route of CUSTOM_STRATEGIES) { if (route.strategy == 'NetworkOnly') { registerRoute( ({ url }) => url.pathname.includes(route.path), new NetworkOnly({ cacheName: PREFIX_CACHE_NAME + route.name_cache }) ); } else if (route.strategy == 'NetworkFirst') { registerRoute( ({ url }) => url.pathname.includes(route.path), new NetworkFirst({ cacheName: PREFIX_CACHE_NAME + route.name_cache, plugins: customStrategiesPlugins }) ); } else if (route.strategy == 'CacheFirst') { registerRoute( ({ url }) => url.pathname.includes(route.path), new CacheFirst({ cacheName: PREFIX_CACHE_NAME + route.name_cache, plugins: customStrategiesPlugins }) ); } } const networkOnly = new NetworkOnly({ cacheName: PREFIX_CACHE_NAME + 'default-strategies', }); const offlinePlugins = [ new ExpirationPlugin({ maxEntries: 100, maxAgeSeconds: 7 * 24 * 60 * 60, purgeOnQuotaError: true, matchOptions: { ignoreVary: true, }, }), new CacheableResponsePlugin({ statuses: [0, 200] }) ]; const navigationHandler = async (params) => { if (params.event.request.method === 'GET') { if (params.event.request.url.includes('googletagmanager.com') || params.event.request.url.includes('google-analytics') || params.event.request.url.includes('gtm.js') || params.event.request.url.includes('facebook.com') || params.event.request.url.includes('facebook.net') ) { return await networkOnly.handle(params); } } try { return await networkOnly.handle(params); } catch (error) { return caches.match(OFFLINE_PAGE_URL, { cacheName: OFFLINE_CACHE_NAME, plugins: offlinePlugins }); } }; registerRoute(new NavigationRoute(navigationHandler)); 