(()=>{"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,n(o.key),o)}}function r(e,t,r){return(t=n(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(t){var r=function(t,r){if("object"!==e(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===e(r)?r:String(r)}var o=function(){function e(t,n){var o=t.name,i=t.params,s=t.scope,a=(t.source,n.messageProcessor),c=n.messageEvent,u=n.messageChannel,l=void 0===u?new MessageChannel:u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"params",void 0),r(this,"name",void 0),r(this,"scope",void 0),r(this,"source",void 0),r(this,"messageEvent",void 0),r(this,"messageProcessor",void 0),r(this,"messageChannel",void 0),this.messageEvent=c,this.messageProcessor=a,this.messageChannel=l,this.params=i,this.name=o,this.scope=s,this.source=a.currentScope}var n,o,i;return n=e,i=[{key:"createFromMessageEvent",value:function(t,r){var n=r.messageProcessor,o=r.messageChannel,i=t.data;return new e({name:i.name,params:i.params,scope:i.scope,source:i.source},{messageProcessor:n,messageChannel:o,messageEvent:t})}},{key:"create",value:function(t,r){var n=r.messageProcessor,o=r.messageChannel;return void 0===t.data?new e(t,{messageProcessor:n,messageChannel:o}):e.createFromMessageEvent(t,{messageProcessor:n,messageChannel:o})}}],(o=[{key:"respondWith",value:function(e){var t;null===(t=this.messageEvent)||void 0===t||null===(t=t.ports)||void 0===t||t.forEach((function(t){var r;t.postMessage(null==e?void 0:e.serialize(),[null==e||null===(r=e.messageChannel)||void 0===r?void 0:r.port2])}))}},{key:"respondWithData",value:function(t){var r=new e({name:t.name,params:t.params,scope:t.scope,source:t.source},{messageProcessor:this.messageProcessor});return this.respondWith(r)}},{key:"respondWithParams",value:function(t){var r=new e({name:this.name,params:t,scope:"app"===this.scope?"app":"worker"===this.scope?"client":"worker",source:this.source},{messageProcessor:this.messageProcessor});return this.respondWith(r)}},{key:"then",value:function(t){var r=this;return this.messageChannel.port1.onmessage=function(n){var o=e.createFromMessageEvent(n,{messageProcessor:r.messageProcessor});t(o)},this}},{key:"send",value:function(){return this.messageProcessor.dispatch(this.serialize(),[this.messageChannel.port2]),this}},{key:"serialize",value:function(){return{name:this.name,params:this.params,scope:this.scope,source:this.source}}}])&&t(n.prototype,o),i&&t(n,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function a(e){var t=function(e,t){if("object"!==i(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===i(t)?t:String(t)}function c(e,t,r){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,r)}function u(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,f(e,t,"get"))}function l(e,t,r){return function(e,t,r){if(t.set)t.set.call(e,r);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=r}}(e,f(e,t,"set"),r),r}function f(e,t,r){if(!t.has(e))throw new TypeError("attempted to "+r+" private field on non-instance");return t.get(e)}var p=new WeakMap,h=new WeakMap,m=new WeakMap,v=function(){function e(t){var r,n,o,i=t.context,s=t.currentScope,u=t.processors;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,p,{writable:!0,value:void 0}),c(this,h,{writable:!0,value:void 0}),r=this,o=void 0,(n=a(n="currentScope"))in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,c(this,m,{writable:!0,value:[]}),l(this,p,i),l(this,h,new MessageChannel),this.currentScope=s,l(this,m,u)}var t,r,n;return t=e,r=[{key:"handle",value:function(e){var t=this,r=this.createMessage(e);u(this,m).filter((function(e){return e.supports(r)})).forEach((function(e){return e.handle(r,{messageProcessor:t,context:u(t,p),channel:u(t,h),currentScope:t.currentScope})}))}},{key:"dispatch",value:function(t){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],o=function(){r.handle(t)},i=function(){u(r,p).postMessage(t,n)};switch(!0){case(null==t?void 0:t.scope)===e.SCOPE_APP:o(),i();break;case(null==t?void 0:t.scope)===this.currentScope:o();break;case(null==t?void 0:t.scope)!==this.currentScope:i()}}},{key:"createMessage",value:function(e){return o.create(e,{messageProcessor:this})}}],n=[{key:"SCOPE_APP",get:function(){return"app"}},{key:"SCOPE_CLIENT",get:function(){return"client"}},{key:"SCOPE_WORKER",get:function(){return"worker"}}],r&&s(t.prototype,r),n&&s(t,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),y=function(){return{put:function(e,t){caches.open("redirect-sw-cache").then((function(r){r.put(e,t)}))},get:function(e){return caches.match(e)}}};function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,S(n.key),n)}}function w(e,t,r){return(t=S(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function S(e){var t=function(e,t){if("object"!==b(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==b(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===b(t)?t:String(t)}function k(e,t,r){var n=function(e,t,r){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.get(e)}(e,t);return function(e,t,r){if(t.set)t.set.call(e,r);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=r}}(e,n,r),r}var P=new WeakMap,E=function(){function e(t){var r,n,o,i=t.params,s=t.context;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),w(this,"params",void 0),w(this,"context",void 0),o={writable:!0,value:!1},function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(r=this,n=P),n.set(r,o),this.params=i,this.context=s}var t,r;return t=e,r=[{key:"supportsFetch",value:function(e,t){if(new URL(e.request.url).origin===t.origin)return!0}},{key:"handle",value:function(e,t){var r=this;console.log("--handle--"),this.supportsFetch(e,t)&&(console.log("--supportsFetch--"),e.respondWith(this.request(e.request).then((function(e){return r.isNotSuccessful(e)?r.handleFetchIsNotSuccessful(e):e})).catch((function(e){return r.handleFetchError(e)})).finally((function(){k(r,P,!1)}))))}},{key:"handleFetchIsNotSuccessful",value:function(e){return e}},{key:"handleFetchError",value:function(e,t){if(this.params.offline)return this.handleOfflinePage(t);var r=this.getRedirectUrl(),n='<html lang="en"><body><script>window.location.href = \''.concat(r,"'<\/script></body></html>");return new Response(n,{headers:{"Content-Type":"text/html"},status:200})}},{key:"request",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new AbortController,o=n.signal;return setTimeout((function(){console.log("--setTimeout--"),k(t,P,!0),n.abort(),console.log("--controller.abort--")}),this.params.fetchTimeout),fetch(e,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){w(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({signal:o},r))}},{key:"isSuccessful",value:function(e){return 200===e.status}},{key:"isNotSuccessful",value:function(e){return!this.isSuccessful(e)}},{key:"sendClientMessage",value:function(e,t){this.context.messageProcessor.createMessage({name:e,params:t,scope:v.SCOPE_CLIENT,source:v.SCOPE_WORKER})}},{key:"handleOfflinePage",value:function(e){var t=this;return this.request(this.params.offline).then((function(e){return y().put(t.params.offline,e.clone()),setTimeout((function(){t.sendClientMessage("fetch:error",{redirect:t.getRedirectUrl()})}),1e3),e})).catch((function(r){return y().get(t.params.offline)||t.handleFetchError(r,e)}))}},{key:"getRedirectUrl",value:function(){var e=(this.params.redirectHosts.length>0?this.params.redirectHosts:redirectHosts()).map((function(e){return{sort:Math.random(),host:e}})).sort((function(e,t){return e.sort-t.sort})).map((function(e){return e.host})).find((function(){return!0}));return"https://".concat(e,"/ru")}}],r&&d(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function O(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,M(n.key),n)}}function j(e,t,r){return t&&O(e.prototype,t),r&&O(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function T(e,t,r){return(t=M(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function M(e){var t=function(e,t){if("object"!==C(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==C(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===C(t)?t:String(t)}var R=j((function e(t){var r=t.project,n=void 0===r?null:r,o=t.redirectHosts,i=void 0===o?["booil0e6.com","booil0e6.com"]:o,s=t.networkStrategy,a=void 0===s?"fetch":s,c=t.fetchCallback,u=void 0===c?null:c,l=t.fetchTimeout,f=void 0===l?14e3:l,p=t.workerUrl,h=void 0===p?"/sw.js":p,m=t.workerSkipWaiting,v=void 0===m||m,y=t.workerClientsClaim,b=void 0===y||y,g=t.workerRegister,d=void 0===g||g,w=t.confirmRedirect,S=void 0!==w&&w,k=t.redirectMessage,P=void 0===k?"Seems you issues with access to the current domain. Do you want to go to the active domain?":k,E=t.offline,C=void 0===E?null:E;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),T(this,"project",""),T(this,"redirectHosts",["booil0e6.com","booil0e6.com"]),T(this,"networkStrategy","fetch"),T(this,"fetchCallback",null),T(this,"fetchTimeout",1e3),T(this,"workerUrl","/sw.js"),T(this,"confirmRedirect",!0),T(this,"redirectMessage",void 0),T(this,"workerSkipWaiting",!0),T(this,"workerClientsClaim",!0),T(this,"workerRegister",!1),T(this,"offline",null),this.project=n,this.redirectHosts=i,this.networkStrategy=a,this.fetchCallback=u,this.fetchTimeout=f,this.workerUrl=h,this.workerSkipWaiting=v,this.workerClientsClaim=b,this.workerRegister=d,this.confirmRedirect=S,this.redirectMessage=P,this.offline=C}));function W(e){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},W(e)}function x(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==W(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==W(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===W(o)?o:String(o)),n)}var o}var L=[new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,r;return t=e,(r=[{key:"supports",value:function(e){return"worker:example"===e.name}},{key:"handle",value:function(e,t){t.messageProcessor,e.respondWithData({params:2*e.params,name:"app:worker:register",scope:v.SCOPE_CLIENT})}}])&&x(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}())];function F(e){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},F(e)}function _(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,U(n.key),n)}}function N(e,t,r){return(t=U(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function U(e){var t=function(e,t){if("object"!==F(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==F(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===F(t)?t:String(t)}self.__WB_MANIFEST,(new(function(){function e(){var t,r,n,o,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),N(this,"params",void 0),N(this,"messageProcessor",void 0),N(this,"networkManager",void 0),this.params=(t=this.getContext().location,r=new URL(t).searchParams,n={},o=function(e){switch(!0){case"true"===e.toLowerCase():return!0;case"false"===e.toLowerCase():return!1;case"null"===e.toLowerCase():return null;case!isNaN(e):return Number(e);default:return e}},r.forEach((function(e,t){switch(!0){case void 0!==n[t]:n[t]=[n[t],o(e)];break;case Array.isArray(n[t]):n[t].push(o(e));break;case void 0===n[t]:default:n[t]=o(e)}})),new R(n)),this.messageProcessor=new v({context:this,currentScope:v.SCOPE_WORKER,processors:L}),this.networkManager=(i={context:this,params:this.params},new E({params:i.params,context:i.context}))}var t,r;return t=e,(r=[{key:"init",value:function(){var e=this;self.addEventListener("message",(function(t){e.messageProcessor.handle(t)})),this.params.workerSkipWaiting&&self.addEventListener("install",(function(e){self.skipWaiting()})),this.params.workerClientsClaim&&self.addEventListener("activate",(function(e){e.waitUntil(clients.claim())})),self.addEventListener("fetch",(function(t){console.log("CAUGHT fetch!!!!",t);var r=new URL(self.location);e.networkManager.handle(t,r)}))}},{key:"postMessage",value:function(e){var t=e.name,r=e.params,n=e.scope,o=e.source,i=void 0===o?v.SCOPE_WORKER:o;self.clients.matchAll().then((function(e){e.forEach((function(e){e.postMessage({name:t,params:r,scope:n,source:i})}))}))}},{key:"getContext",value:function(){return self}}])&&_(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}())).init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,