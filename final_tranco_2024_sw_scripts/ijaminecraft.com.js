'use strict';const NAME='3ZiZ9';const offline_page_url = '/offline-page';const prefetchFiles = async() => {const cache = await caches.open(NAME);const urls = [offline_page_url, '/favicon.ico'];for (const url of urls) {await cache.add(url);}};const activateCurrentWorker = async() => {for (const name of await caches.keys()) {if (name !== NAME) {await caches.delete(name);}}await clients.claim();};const requestUrl = async(request) => {const url = request.url;const cached_result = await caches.match(request);if (cached_result !== undefined) {return cached_result;}let response;try {response = await fetch(request);}catch (err) {}if (url.startsWith('http')) {if (!response) {if (request.mode === 'navigate' ||(request.method === 'GET' &&request.headers.get('accept').includes('text/html'))) {return caches.match(offline_page_url);}}else if (response.ok &&response.type === 'basic' &&!/\.(zip|rar|txt|json|xml|xsl)$/i.test(url)) {const cache = await caches.open(NAME);cache.put(url, response.clone());}}return response;};self.addEventListener('install', event => {self.skipWaiting();event.waitUntil(prefetchFiles());});self.addEventListener('activate', event => {event.waitUntil(activateCurrentWorker());});self.addEventListener('fetch', event => {const request = event.request;if (request.method.toUpperCase() === 'GET') {event.respondWith(requestUrl(request));}});