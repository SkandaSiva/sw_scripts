class Logger{constructor(e){this.label=e}log(...e){console.log(this.label,...e)}error(...e){console.error(this.label,...e)}async logToServer(...e){const o="/common/log_request",t=e.map((e=>"string"==typeof e?e:JSON.stringify(e))).join(" ");this.log(t,"(also logToServer)");const r={category:"logger.js",msg:t};try{fetch(o,{body:JSON.stringify(r),method:"POST",headers:new Headers({"Content-Type":"application/json"})})}catch(e){this.error("Failed to log to server:",e)}}thenLogPromise(e){return[o=>(this.log(e,"fulfilled:",o),o),o=>(this.log(e,"REJECTED:",o),Promise.reject(o))]}}const logger=new Logger("[sw_main]");self.addEventListener("activate",(e=>{logger.log("serviceworker.js activate event listener"),e.waitUntil(async function(){self.registration.navigationPreload&&await self.registration.navigationPreload.enable()}())}));