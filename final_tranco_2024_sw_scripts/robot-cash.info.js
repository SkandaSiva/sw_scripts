let conf={dbg:!1,doRedir:!0,enableInDev:!1,strictMode:!0,db:{dbName:"sw",dbVersion:1,storeName:"data"},ticker:{delay:1e3,maxLifeTime:6e4},fetcher:{cooldownPeriod:6e4,keyword:"UHost",devDomainSource:"",devDomainResult:""}},logger={log:(e,...t)=>conf.dbg?console.log(Date.now(),"[SW] "+e,...t):null,error:(e,...t)=>conf.dbg?console.error(Date.now(),"[SW Error] "+e,...t):null},utils={removeOptionalTrailingDot:function(e,t){return t&&"."===e[e.length-1]?e.substring(0,e.length-1):e},isFQDN:function(e,{requireTld:t=!0,allowUnderscores:r=!1,allowTrailingDot:n=!1}={}){if("string"!=typeof e)return!1;var a=utils.removeOptionalTrailingDot(e,n).split(".");if(t){e=a.pop();if(!a.length||!/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(e))return!1}for(let e,t=0;t<a.length;t++){if(e=a[t],r){if(0<=e.indexOf("__"))return!1;e=e.replace(/_/g,"")}if(!/^[a-z\u00a1-\uffff0-9-]+$/i.test(e))return!1;if(/[\uff01-\uff5e]/.test(e))return!1;if("-"===e[0]||"-"===e[e.length-1])return!1}return!0},isDev:function(e){return"localhost"===e||/^(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})(\.(25[0-5]|2[0-4]\d|1\d{2}|\d{1,2})){3}$/.test(e)||/^([\da-fA-F]{1,4}:){7}[\da-fA-F]{1,4}$/.test(e)},deduplicationFn:function(t){let r=null;return async function(...e){if(r)return r;try{return await(r=t.apply(this,e))}finally{r=null}}},getH:async function(){return db.get("h")},getFullNewUrl:async function(e,t,r){var n=await utils.getH();return"https://"+e+t+(r=n&&"string"==typeof n&&0<n.length?r&&""!=r?r+"&h="+n:"?h="+n:r)},redir:async function(t,r){var n;for(n of await self.clients.matchAll())if(!r||!n.focused){let e=await utils.getFullNewUrl(t,new URL(n.url).pathname,new URL(n.url).search);conf.doRedir?n.navigate(e):logger.log("REDIRECT - client",e)}if(r){let e=await utils.getFullNewUrl(t,new URL(r.url).pathname,new URL(r.url).search);return conf.doRedir?new Response(null,{status:302,headers:{Location:e}}):(logger.log("REDIRECT - request",e),fetch(r))}}};var db={config:conf.db,inmem:{},connect:async function(){return new Promise((e,t)=>{let r=indexedDB.open(db.config.dbName,db.config.dbVersion);r.onsuccess=()=>e(r.result),r.onerror=e=>t("IndexedDB error: "+e.target.error),r.onupgradeneeded=e=>{e=e.target.result;e.objectStoreNames.contains(db.config.storeName)||e.createObjectStore(db.config.storeName,{keyPath:"key"})}})},get:async function(a){if(!indexedDB)return db.inmem[a];var e=await db.connect();try{let n=e.transaction([db.config.storeName],"readonly").objectStore(db.config.storeName);return await new Promise((e,t)=>{let r=n.get(a);r.onsuccess=()=>e(r.result?r.result.value:null),r.onerror=()=>t(r.error)})}catch(e){logger.error("Error reading from DB:",e)}finally{e&&e.close()}},set:async function(a,i){if(indexedDB){var e=await db.connect();try{let n=e.transaction([db.config.storeName],"readwrite").objectStore(db.config.storeName);await new Promise((e,t)=>{let r=n.put({key:a,value:i});r.onsuccess=e,r.onerror=()=>t(r.error)})}catch(e){logger.error("Error writing to DB:",e)}finally{e&&e.close()}}else db.inmem[a]=i}},ticker={cb:null,setCb:function(e){ticker.cb=e},config:conf.ticker,timerId:null,activationTime:0,activate:function(){logger.log("TICKER - activate"),ticker.activationTime+ticker.config.maxLifeTime>Date.now()||(ticker.activationTime=Date.now(),ticker.timerId&&clearTimeout(ticker.timerId),ticker.timerId=setTimeout(ticker.do,ticker.config.delay),logger.log("TICKER - setTimeout",ticker.timerId))},cancel:function(){logger.log("TICKER - cancel"),ticker.timerId&&(clearTimeout(ticker.timerId),ticker.timerId=null,ticker.activationTime=0)},do:async function(){logger.log("TICKER - do");try{ticker.cb&&await ticker.cb()}catch(e){logger.error("Error in timer:",e)}finally{ticker.activationTime=0}}},actDom={config:conf.fetcher,get:async function(){logger.log("FETCHER - get");let e=await db.get("actual_domain");var t=await db.get("last_check");return e=utils.isFQDN(e)?e:null,e=t&&e&&!(t+actDom.config.cooldownPeriod<Date.now())?e:await actDom.fetch()},fetch:utils.deduplicationFn(async function(){logger.log("FETCHER - fetch");var e=actDom.config.devDomainSource||currentDomain,e=await fetch("https://dns.google.com/resolve?type=TXT&name=origin."+e);if(!e.ok)return null;e=await e.json();let t=null;return actDom.config.devDomainResult?t=actDom.config.devDomainResult:e&&e.Answer&&e.Answer[0]&&e.Answer[0].data&&(t=e.Answer[0].data),utils.isFQDN(t)?(await db.set("actual_domain",t),await db.set("last_check",Date.now()),logger.log("Actual domain updated ",t),t):null}),byKeyword:async function(e){logger.log("FETCHER - byKeyword");e=await e.text();return"string"==typeof e&&!!e.includes(actDom.config.keyword)&&(logger.log("Actual domain updated by keyword "),ticker.cancel(),await db.set("actual_domain",currentDomain),await db.set("last_check",Date.now()),!0)}};let currentDomain=self.location.hostname;async function handleNavigationFetch(e){let t=!1;try{var r=await db.get("actual_domain");if(r&&r!==currentDomain){if(logger.log("Other domain detected - ",r),(r=await actDom.get())&&r!==currentDomain){var n=await utils.redir(r,e);if(n)return n}t=!0}ticker.activate()}catch(e){logger.error(e)}r=await fetch(e);try{if(conf.strictMode){if(!await actDom.byKeyword(r.clone())&&!t){var a=await actDom.get();if(a&&a!==currentDomain){var i=await utils.redir(a,e);if(i)return i}}}else actDom.byKeyword(r.clone())}catch(e){logger.error(e)}return r}ticker.setCb(async()=>{logger.log("callback");var e=await actDom.get();e&&e!==currentDomain&&await utils.redir(e)}),self.addEventListener("install",e=>{self.skipWaiting()}),self.addEventListener("activate",e=>{e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{e&&e.data&&"saveH"===e.data.action&&db.set("h",e.data.h)}),!conf.enableInDev&&utils.isDev(self.location.hostname)||self.addEventListener("fetch",async e=>{!navigator.onLine||"navigate"!==e.request.mode&&"manual"!==e.request.redirect||e.respondWith(handleNavigationFetch(e.request))});