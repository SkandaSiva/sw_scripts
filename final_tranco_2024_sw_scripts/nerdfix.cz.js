const preloadPaths = ["/dist/nerdfix.a91df7921328fde4128b.css","/dist/nerdfix.a8a4aa0ccc9c6cc2e39d.js","/dist/chunk.8079784c31dc06fd09ca.js","/dist/article.5144cd05467bb1f80d78.css","/dist/chunk.5144cd05467bb1f80d78.js","/dist/homepage.0fba73b6b0b94277953f.css","/dist/chunk.0fba73b6b0b94277953f.js"]; const assetsCacheKey = 'iwsAssets/2d04a4e29fec762b82b9dd88f904390e4de60a32'; let debug = false; self.addEventListener('install', (event) => { debug = new URL(location).searchParams.get('debug') ?? false; if (debug) console.log('Installing ServiceWorker', assetsCacheKey, preloadPaths); self.skipWaiting(); event.waitUntil( (async function () { const cache = await caches.open(assetsCacheKey); await cache.addAll(preloadPaths); }()), ); }); self.addEventListener('activate', (event) => { if (debug) console.log('Activating ServiceWorker', assetsCacheKey); event.waitUntil( (async function () { const cacheKeys = await caches.keys(); for (const i in cacheKeys) { const cacheKey = cacheKeys[i]; if (/^iwsAssets\//.test(cacheKey) && cacheKey !== assetsCacheKey) { if (debug) console.log('Deleting old cache', cacheKey); await caches.delete(cacheKey); } } }()), ); }); self.addEventListener('fetch', (event) => { const url = new URL(event.request.url); if (event.request.method === 'GET' && (url.pathname.indexOf('/dist/') === 0 || url.pathname.indexOf('/uploads/emojis/') === 0)) { event.respondWith( (async function () { const cache = await caches.open(assetsCacheKey); let response = await cache.match(event.request); if (response) { if (debug) console.log('ServiceWorker: Serving from cache', url.pathname); return response; } try { if (debug) console.log('ServiceWorker: Fetching', url.pathname); response = await fetch(event.request); await cache.put(event.request, response.clone()); return response; } catch (e) { if (debug) console.error('ServiceWorker: Fetch failed', e); if (response !== undefined) { return response; } } }()), ); } }); 