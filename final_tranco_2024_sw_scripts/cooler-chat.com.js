var window=self;importScripts("./live-config.js"),function(){"use strict";let e,t=0;try{e=JSON.parse('{"revisions":{"modules":"718e0675fb016acb52cf7a23ac9a3bcba99b0e61","branch":"master","stage":["bd72e6b","4e3c260","cbd2b23","c297d75","bce4ded","7d3bcb3","44a73a9","b97d3d2","64633ed","1e6dab5","3e52706","2a36af8","d0c2961","46a592c","9fb4cd9","7aea9c4","3d54972","548a40f","f3d0441","bd717ea","2ae175c","356b94f","6ec7ca0","39d0e14","e7d64d0","d369bfb","07981ba","3295b2b","230b5ef","b38fc1c","91674d7","5936295","45f2992","158028b","f64ef23","fac6748","e9e0935","6373ff9","f94722f","b6ecb84","75bab73","2f0e402","79698ee","712d93d","b13293c","0e8ad40","422b4c0","09f86ca","1296100","5299a3a","73048a6","a98c4aa","0e7f0f8","70da564","aaf700e","9f898f5","f91f9a0","9e13d49","08ac535","9cbf87a","13c20e7","6dda044","46b6dac","67140c9","88a1472","a976a58","5a1025b","c3d456a","0d3b6d7","ff0dd85","75fd30b","d556947","209d4eb","6d1ea8c","1f0dfe4","a106ed1","5319083","884226f","da3c83f","8035e52","0f02ae8","d8ed48f","950ecf8","465f9a7","3ae72c9","afeeb11","1919131","d3c99cf","4a5ca7d","8486dbb","8ce184d","0ea2e8e","20c73e1","e869e47","1e8d542","e2da39d","2215091","cbec2bc","d44bf38","0f434e5","a6d02ca","4b60a98","a16d203","f1b6c40","b6366b8","55b8d32","f1929e4","7e264f6","812b2d5"],"frontend_version":71,"worker_version":2,"build_url":"LOCAL","build_number":52915,"build_time":"2024-11-26T11:44:23.884Z","appType":"END_USER","clientApp":"FRONT_END_CHAT","clientVersion":0}}')}catch(h){e=null}const a=new URL(self.location),n=a.searchParams.get("brev")?a.searchParams.get("brev"):e.revisions.stage.slice(-1)[0],o=()=>{const e=Math.random();return(Date.now()*e).toString(16).replace(".","").split("").reverse().join("").substring(0,10)},s=(e,t={})=>{let a="";for(;a.length<e;)a+=o();return a=a.substring(0,e),t.prefix&&(a=`${t.prefix}${a}`),t.postfix&&(a=`${a}${t.postfix}`),a},c=s(12),i=(a,o,i={})=>{console.log(`SW: Tracking event with action ${a}`),window.isTestEnv&&d({type:"TEST",action:a,ownUserId:o,payload:i});const l=window.liveConfig.apiEndpoint.replace("{brev}",n),f={events:[{eventAction:"GENERIC",eventValues:{category:"WEBPUSH",action:a,app:e.revisions.appType,domain:new URL(self.registration.scope).host,clientId:c,clientSn:t++,eventVersion:7,userId:o,custom:i}}]},p={headers:{accept:"application/json","content-type":"text/plain"},body:JSON.stringify(f),method:"POST"},h=(e=0)=>{const t=(e=>`H-${s(22)}-${e}`)(e),n=`${l}/data-warehouse/track/event?requestId=${t}&clientId=${c}&payload=true`;return console.log(`SW: Sending event for action ${a}`,n,p),fetch(n,p).then((t=>{if(t.ok)return console.log(`SW: Successfully send event for action ${a}`),t.json();if(e>=3)throw console.log(`SW: Failed to send event for action ${a}`),new Error(`Can't track ${a} event, max retries reached`);return h(e+1)})).catch((e=>{console.log(`SW: Failed to send event for action ${a}`,e),r(e)}))};return h()},r=t=>{d({type:"ERROR",error:t,payload:e})},d=e=>{clients.matchAll({type:"window"}).then((t=>{t[0]&&t[0].postMessage(e)}))},l=e=>{const t=e&&e.url?new URL(e.url).href:null,a=()=>{if(t)return clients.openWindow(t);{const e=new URL(registration.scope).href;return clients.openWindow(e)}},n=t=>t.focus().then((t=>{return-1===self.navigator.userAgent.indexOf("Firefox")?t.postMessage({type:"OPEN_CONVERSATION",payload:e}):(n=300,new Promise((e=>setTimeout(e,n)))).then((()=>f().then((n=>n?t.postMessage({type:"OPEN_CONVERSATION",payload:e}):a()))));var n}));return clients.matchAll({type:"window"}).then((e=>{for(const t of e)if("focus"in t)return n(t);return a()}))};self.addEventListener("message",(t=>{console.log("SW: Received message",t),t.data&&"SW_INIT"===t.data.type&&t.source.postMessage({type:"SW_INIT",payload:e})})),self.addEventListener("pushsubscriptionchange",(e=>{try{console.log("SW: Start pushsubscriptionchange",e),e.waitUntil(i("SUBSCRIPTIONCHANGE",0)),console.log("SW: End pushsubscriptionchange",e)}catch(t){r(t)}})),self.addEventListener("notificationclose",(e=>{try{console.log("SW: Start notificationclose",e);const{chatId:t,ownUserId:a,messageId:n}=e.notification.data;e.waitUntil(i("NOTIFICATIONCLOSE",a,{chatId:t,messageId:n})),console.log("SW: End notificationclose",e)}catch(t){r(t)}})),self.addEventListener("notificationclick",(e=>{try{console.log("SW: Start notificationclick",e);const{chatId:t,ownUserId:a,messageId:n}=e.notification.data;e.waitUntil(i("CLICK",a,{chatId:t,messageId:n}));const o=l(e.notification.data).catch((t=>{console.log("SW: Error in notificationclick event",e,t),r(t)}));e.waitUntil(o),e.notification.close()}catch(t){console.log("SW: Error in notificationclick event",e,t),r(t)}console.log("SW: End notificationclick",e)})),self.addEventListener("push",(e=>{if(!e.data)return console.log("SW: Empty push message received.",e),void r(new Error("Backend sent an empty notification data"));try{console.log("SW: Start push event",e);const t=e.data.json();e.waitUntil(i("RECEIVED",t.data.receptorUserId));const a=t.data.receptorUserLocale,n=t.data.session;(e=>{try{self.navigator.setAppBadge&&Number.isInteger(e)&&self.navigator.setAppBadge(e)}catch(t){console.log("SW: Error when setting AppBadge",t)}})(t.data.unreadMessageCount),t.data.messages.forEach((o=>e.waitUntil(p(a,n,t.data.receptorUserId,t.data.receptor,o,e))))}catch(t){console.log("SW: Error in push event",e,t),r(t)}console.log("SW: End push event",e)}));const f=()=>{try{return clients.matchAll({type:"window"}).then((e=>{let t=!1;for(const a of e)if(a.focused){t=!0;break}return t})).catch((e=>{r(e)}))}catch(e){r(e)}},p=(t,a,n,o,s,c)=>{try{console.log("SW: Start handlePush");const d={vibrate:[100,50,100]};s.dispatcherProfilePicture&&(d.icon=s.dispatcherProfilePicture[0].url),d.data={session:a,receptor:o,ownUserId:n,dispatcher:s.dispatcher,chatId:s.chat,messageId:s.messageId,dateCreated:s.dateCreated};let l,f=`${registration.scope}livechat/?chatOpenedTrigger=ngsw&session=${a}`;if("PROFILE"===s.dispatcher.type?(f+=`&profileId=${s.dispatcher.id}`,"ANIMATE"===e.revisions.appType&&(f+=`&ownProfileId=${o.id}`)):"USER"===s.dispatcher.type&&(f+=`&userId=${s.dispatcher.id}`),d.data.url=f,d.tag=`${s.chat}`,"de"===t)l=`Gast${s.dispatcher.id}`,d.body="ðŸ“· Foto";else l=`Guest${s.dispatcher.id}`,d.body="ðŸ“· Photo";s.message&&(d.body=s.message),s.dispatcherUsername&&(l=s.dispatcherUsername);const p=registration.showNotification(l,d).then((()=>i("TRIGGERED",n,{chatId:s.chat,messageId:s.messageId}))).catch((e=>{console.log("SW: Error in handlePush",e),r(e)}));return c.waitUntil(p),console.log("SW: End handlePush"),p}catch(d){console.log("SW: Error in handlePush",d),r(d)}};self.addEventListener("install",(e=>{e.waitUntil(self.skipWaiting())})),self.addEventListener("activate",(e=>{e.waitUntil(self.clients.claim())}))}();