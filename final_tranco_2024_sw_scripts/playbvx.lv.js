const version=2.6,offlinecacheName="offline";let cacheKeyUrls=[];function getBaseURL(){const e=new URL(location).searchParams.get("language"),a=new URL(location).searchParams.get("bucket");return e?`/content/${a}/${e}`:`/content/${a}`}async function populateCache(){try{await caches.delete(offlinecacheName);const e=getBaseURL(),a=await fetch(`${e}/pwa-config.json?v=${version}`),n=await a.json(),t=await caches.open(offlinecacheName);await t.addAll(n.urlsToCache)}catch(e){console.error(e)}}async function onInstall(e){self.skipWaiting(),e.waitUntil(populateCache())}async function onActivate(e){e.waitUntil(handleActivation())}async function onFetch(e){const a=e.request;isURLInCache(a.url)?e.respondWith(getResourceFromOfflineCache(a)):"navigate"===a.mode&&e.respondWith(getNavigationResource(a))}async function getNavigationResource(e){try{return await fetch(e)}catch(a){return console.log(`Error fetching the URL: ${e.url}`),await populateCacheKeyUrls(),getResourceFromOfflineCache(`${getBaseURL()}/offline/offline.html`)}}function isURLInCache(e){return cacheKeyUrls.includes(e)}async function populateCacheKeyUrls(){const e=await caches.open(offlinecacheName),a=await e.keys();cacheKeyUrls=a.map(e=>e.url)}async function handleActivation(){await clients.claim()}async function getResourceFromOfflineCache(e){const a=await caches.open(offlinecacheName);return await a.match(e,{ignoreSearch:!0})}self.addEventListener("install",onInstall),self.addEventListener("activate",onActivate),self.addEventListener("fetch",onFetch);