self.config=JSON.parse(new URL(location).searchParams.get("config")),self.cacheName=self.config.cache_version,self.cacheFilesCdn=["/js/min-"+self.cacheName+".js","/css/min-"+self.cacheName+".css","/manifest.json","/translations/de.json","/translations/en.json","/images/sprites.svg","/images/fav.png","/images/error.png","/fonts/Futura-Web/Futura-Web-Regular.woff2","/fonts/Futura-Web/Futura-Web-Heavy.woff2","/fonts/OpenSans/OpenSans-Light.woff2","/fonts/OpenSans/OpenSans-Regular.woff2","/fonts/OpenSans/OpenSans-Bold.woff2"],self.cacheContent=["/offline"],self.offlineUrl="/offline",self.addEventListener("install",e=>{self.skipWaiting(),e.waitUntil((async()=>{try{const e=await caches.open(self.cacheName);self.contentToCache.length;let a=0;await Promise.all(self.cacheFilesCdn.map(async t=>{let s;try{s=new AbortController;const{signal:n}=s,c=new Request("https://"+self.config.cdn+t,{cache:"reload"}),l=await fetch(c,{signal:n});l&&200===l.status&&(await e.put(c,l.clone()),a+=1)}catch(e){s.abort()}})).all(self.cacheContent.map(async t=>{let s;try{s=new AbortController;const{signal:n}=s,c=new Request(t,{cache:"reload"}),l=await fetch(c,{signal:n});l&&200===l.status&&(await e.put(c,l.clone()),a+=1)}catch(e){s.abort()}}))}catch(e){}})())}),self.addEventListener("activate",e=>{e.waitUntil((async()=>{const e=await caches.keys();await Promise.all(e.map(async e=>{self.cacheName!==e&&await caches.delete(e)}))})())}),self.addEventListener("fetch",e=>{"navigate"===e.request.mode&&e.respondWith((async()=>{try{const a=await e.preloadResponse;if(a)return a;return await fetch(e.request)}catch(e){const a=await caches.open(self.cacheName);return await a.match(self.offlineUrl)}})())});