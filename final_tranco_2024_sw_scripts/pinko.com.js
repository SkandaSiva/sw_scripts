function now(){let e=new Date;return e.getTime()}const INVALIDATION_INTERVAL=3e5,NS="IMAGE",SEPARATOR="|",VERSION=Math.ceil(now()/3e5);function buildKey(e){return NS+"|"+e+"|"+VERSION}function parseKey(e){let t=e.split("|");return{ns:t[0],key:t[1],ver:parseInt(t[2],10)}}function purgeExpiredRecords(e){return e.keys().then(t=>Promise.all(t.map(t=>{let n=parseKey(t);if(n.ns===NS&&n.ver!==VERSION)return e.delete(t)})))}function proxyRequest(e,t){let n=buildKey(t.url);return e.open(n).then(e=>e.match(t).then(n=>n||fetch(t.clone()).then(n=>{if("opaque"!==n.type&&!1===n.ok)throw Error("Resource not available");return e.put(t,n.clone()),n}).catch(()=>{console.error("Failed to fetch",t.url)})))}self.addEventListener("install",e=>{e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{e.waitUntil(purgeExpiredRecords(caches))}),self.addEventListener("fetch",e=>{let{request:t}=e;if("GET"===t.method&&t.url.match(/\.(jpe?g.*|png.*|gif.*|svg.*|webp.*|woff.*|css)$/)){e.respondWith(proxyRequest(caches,t))}});