const OFFLINE_VERSION=2;const CACHE_NAME='offline';const OFFLINE_URL='offline.html';self.addEventListener('install',(event)=>{event.waitUntil((async()=>{const cache=await caches.open(CACHE_NAME);await cache.add(new Request(OFFLINE_URL,{cache:'reload'}));})());self.skipWaiting();});self.addEventListener('activate',(event)=>{event.waitUntil((async()=>{if('navigationPreload'in self.registration){await self.registration.navigationPreload.enable();}})());self.clients.claim();});self.addEventListener("push",(event)=>{const data=event.data?event.data?.json():{};if(Object.keys(data).length===0){return;}
event.waitUntil(self.registration.showNotification(data.title,{image:data.image,data:{link:data.link}}));});self.addEventListener("notificationclick",(event)=>{event.notification.close();event.waitUntil(openUrl(event.notification.data.link));});async function openUrl(url){const windowClients=await self.clients.matchAll({type:"window",includeUncontrolled:true,});for(let i=0;i<windowClients.length;i++){const client=windowClients[i];if(client.url===url&&"focus"in client){return client.focus();}}
if(self.clients.openWindow){return self.clients.openWindow(url);}
return null;}
self.addEventListener('fetch',(event)=>{if(event.request.mode==='navigate'){event.respondWith((async()=>{try{const preloadResponse=await event.preloadResponse;if(preloadResponse){return preloadResponse;}
const networkResponse=await fetch(event.request);return networkResponse;}catch(error){console.log('Fetch failed; returning offline page instead.',error);const cache=await caches.open(CACHE_NAME);const cachedResponse=await cache.match(OFFLINE_URL);return cachedResponse;}})());}});