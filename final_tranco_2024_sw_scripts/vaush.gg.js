importScripts("https://www.gstatic.com/firebasejs/8.2.0/firebase-app.js");importScripts("https://www.gstatic.com/firebasejs/8.2.0/firebase-messaging.js");const version="1.00.21";const ua=navigator.userAgent;const ios=!!ua.match(/iPad/i)||!!ua.match(/iPhone/i)||/^((?!chrome|android).)*safari/i.test(ua);const init=(v)=>{if(ios)return;const firebaseConfig={apiKey:"AIzaSyBumssfkEMYHVmgCwc0w8z4lOEeyQitp7g",authDomain:"whiteleaf-4df75.firebaseapp.com",projectId:"whiteleaf-4df75",storageBucket:"whiteleaf-4df75.appspot.com",messagingSenderId:"481773124335",appId:"1:481773124335:web:42780f28e0bf5d8ff4391a",};firebase.initializeApp(firebaseConfig);const VAPIDKEY="BPAHFhXKKkZeOa_ytx0P8bro2cHOdp3yf1kgseYPRnjW1A727E0hgft0VgKbNZZblB3hJgAcQTL5EIsT61L2KRE";const messaging=firebase.messaging();messaging.onBackgroundMessage(function(payload){const notificationTitle=payload.notification.title;const notificationOptions={body:payload.notification.body};self.registration.showNotification(notificationTitle,notificationOptions);});async function postData({url="",data={}}){const response=await fetch(url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(data)});return response.json();}
const registerDevice=async(v)=>{const UUID=await messaging.getToken({vapidKey:VAPIDKEY});if(UUID)await postData({url:`/api/notifications/register`,data:{info:UUID}});return true;};async function handlePermission(){return navigator.permissions.query({name:"notifications"}).then(permissionQuery).catch((err)=>{});}
function permissionQuery(result){var newPrompt;if(result.state=="granted"){registerDevice();}else if(result.state=="prompt"){newPrompt=Notification.requestPermission();}else if(result.state=="denied"){return;}
return newPrompt||result;}
if(Notification.permission!=="granted"){handlePermission();}else{registerDevice();}};async function setupWorker(){const d=new Date().toString().split(" ")[4].slice(0,2);const cacheName="siteCache"+version;const getCacheName=(v)=>cacheName+d;const urlCacheArray=["/","/live","/chat/static/index.html"];const deleteOldCaches=async()=>{const cacheKeys=await caches.keys();cacheKeys.forEach((cacheKey)=>{if(cacheKey!==getCacheName())caches.delete(cacheKey);});return self.skipWaiting();};self.addEventListener("install",function(e){e.waitUntil(caches.open(getCacheName()).then((cache)=>{return cache.addAll(urlCacheArray);}));return self.skipWaiting();});self.addEventListener("activate",function(e){e.waitUntil(deleteOldCaches());return self.skipWaiting();});self.addEventListener("fetch",(event)=>event.respondWith(tryNetwork(event)));async function tryNetwork(event){try{return await network(event);}catch(err){return new Response();}}
async function network(event){return await fetch(event.request);}
return self.clients.claim();}
if(!ios)setupWorker();init();