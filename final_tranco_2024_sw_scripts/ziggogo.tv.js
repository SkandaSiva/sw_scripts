"use strict";var __webpack_exports__={};const isNavigation=e=>{if(!e||!e.request||"GET"!==e.request.method)return!1;const{headers:t}=e.request,a=t.get("accept")||t.get("Accept");return!!a&&a.includes("text/html")},cleanResponse=e=>{const t=e.clone();return("body"in t?Promise.resolve(t.body):t.blob()).then((e=>new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})))},cacheName="orion-PWA-v2",OFFLINE_PAGE="/offline/offline_page.html",OFFLINE_CSS="/offline/style.css",FONTS=["/assets/fonts/InterstatePro-Light.otf","/assets/fonts/InterstatePro-Light.svg","/assets/fonts/InterstatePro-Light.woff","/assets/fonts/InterstatePro-Light.ttf"],OFFLINE_RESOURCES=[OFFLINE_PAGE,OFFLINE_CSS,...FONTS];self.addEventListener("install",(e=>{console.log("[ServiceWorker] Install"),self.skipWaiting();const t=new URL(location).searchParams.get("lang");e.waitUntil(caches.open(cacheName).then((e=>(console.log("[ServiceWorker] Caching app shell"),loadOfflineShell({cache:e,languageCode:t})))))})),self.addEventListener("activate",(e=>(console.log("[ServiceWorker] Activate"),e.waitUntil(caches.keys().then((e=>Promise.all(e.filter((e=>cacheName.startsWith("orion-PWA-")&&e!=cacheName)).map((e=>caches.delete(e))))))),self.clients.claim()))),self.addEventListener("fetch",(e=>{if(isNavigation(e))return console.log("[ServiceWorker] Handling fetch event for",e.request.url),e.respondWith(fetch(e.request).catch((e=>(console.log("[ServiceWorker] Fetch failed; returning offline page instead.",e),caches.open(cacheName).then((e=>e.match(OFFLINE_PAGE)))))));const{pathname:t}=new URL(e.request.url);return OFFLINE_RESOURCES.some((e=>e===t))?e.respondWith(caches.open(cacheName).then((e=>e.match(t)))):void 0})),self.addEventListener("message",(async e=>{const t=await caches.open(cacheName),a=e.data;try{await updateOfflinePage({cache:t,languageCode:a}),console.log("[ServiceWorker] Offline page updated from client event"),e.ports[0].postMessage("success")}catch(t){console.warn("[ServiceWorker] Failed to update Offline page from client event",t),e.ports[0].postMessage("error")}}));const _getOfflinePageUrl=(e="")=>e?OFFLINE_PAGE.replace(".html",`.${e}.html`):OFFLINE_PAGE,_getPageLoader=e=>async({url:t,cacheKey:a=t})=>{const s=await fetch(t);if(!s.ok)return console.error("[ServiceWorker] Failed to load resource",t),Promise.reject();if(s.redirected){const t=await cleanResponse(s);return e.put(a,t)}return e.put(a,s)};function updateOfflinePage({cache:e,languageCode:t}){const a=_getOfflinePageUrl(t);return _getPageLoader(e)({url:a,cacheKey:OFFLINE_PAGE})}function loadOfflineFonts(e){try{FONTS.forEach((t=>e.add(t)))}catch(e){console.error("[ServiceWorker] Failed to load font",e)}}function loadOfflineShell({cache:e,languageCode:t}){const a=[{url:_getOfflinePageUrl(t),cacheKey:OFFLINE_PAGE},{url:OFFLINE_CSS}].map(_getPageLoader(e));return loadOfflineFonts(e),Promise.all(a)}
//# sourceMappingURL=service_worker.js.map