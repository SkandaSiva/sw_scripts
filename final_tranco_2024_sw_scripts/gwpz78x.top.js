(function(){"use strict";const l="offline",u="/redirect.html",f=[u,"/img/logo.svg","/img/loading.gif","/favicon-32x32.png","/favicon-16x16.png","/apple-touch-icon.png"];self.addEventListener("install",t=>{t.waitUntil((async()=>{await(await caches.open(l)).addAll(f)})())}),self.addEventListener("activate",t=>{t.waitUntil((async()=>{"navigationPreload"in self.registration&&await self.registration.navigationPreload.enable()})()),t.waitUntil(r()),self.clients.claim()}),self.addEventListener("fetch",t=>{t.request.mode==="navigate"?t.respondWith((async()=>{try{const e=await h(t.request);if(!e.ok||e.status>=500)throw new Error(`Network response was not ok: ${e.statusText}`);return e}catch(e){return console.log("Fetch failed; returning offline page instead.",e),await(await caches.open(l)).match(u)}})()):t.respondWith((async()=>{try{return await fetch(t.request)}catch(e){return console.log("Fetch failed; trying cache instead.",e),await caches.match(t.request)||new Response("")}})())});function h(t,e=1e4){return Promise.race([fetch(t),new Promise((a,n)=>setTimeout(()=>n(new Error("Request timed out")),e))])}self.addEventListener("message",t=>{t.data.action==="syncMirrors"&&(console.log("sync"),t.waitUntil(r())),t.data&&t.data.type==="SKIP_WAITING"&&self.skipWaiting()}),self.addEventListener("sync",t=>{t.tag==="sync-data"&&t.waitUntil(r())}),self.addEventListener("periodicsync",t=>{t.tag==="sync-data"&&t.waitUntil(r())});function g(t){return new Promise((e,a)=>{const n=indexedDB.open("MyDatabase",1);n.onsuccess=s=>{const o=s.target.result.transaction(t,"readonly").objectStore(t).get(1);o.onsuccess=()=>{e(o.result)},o.onerror=()=>{a(o.error)}},n.onerror=()=>{a(n.error)}})}function w(t,e){return new Promise((a,n)=>{const s=indexedDB.open("MyDatabase",1);s.onupgradeneeded=c=>{const i=c.target.result;i.objectStoreNames.contains(t)||i.createObjectStore(t,{keyPath:"id",autoIncrement:!0})},s.onsuccess=c=>{const o=c.target.result.transaction(t,"readwrite").objectStore(t),y={...e,id:2},d=o.put(y);d.onsuccess=()=>{a()},d.onerror=()=>{n(d.error)}},s.onerror=()=>{n(s.error)}})}async function r(t){try{const e=await g("syncStore"),n=await(await fetch(`${e.baseURL}/active_mirrors`)).json();n.data&&Array.isArray(n.data)&&n.data.length>0&&w("syncStore",{activeMirrors:n.data})}catch(e){console.error("Ошибка синхронизации:",e)}}})();
