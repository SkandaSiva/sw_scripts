var swVersion="3.0.9";const firebaseVersion='8.9.1';const http=0;importScripts("https://www.gstatic.com/firebasejs/"+firebaseVersion+"/firebase-app.js");importScripts("https://www.gstatic.com/firebasejs/"+firebaseVersion+"/firebase-messaging.js");const options={firebaseConfig:{projectId:"haryana-dc-rate-job-42791",messagingSenderId:"768837839019",appId:"1:768837839019:web:e5d5beb71bcffd6ea3efee",apiKey:"AIzaSyCYNgJU-Y6zuYWvBZiZKZcw3bi-J4VW6YU",},domain:"www.haryanadcratejob.com",api_url:"https://push.khabriexpress.in/api/token",vapid_public_key:"BO_OLeTtPMGjSuyjpFg7SEgcV8BhNjePOy1-NpzcreKSUiX455DCwuBlh_fRJ6N4X1PId7YA5o56EWEA5qZxz4o",}
firebase.initializeApp({...options.firebaseConfig});self.addEventListener('activate',function(a){a.waitUntil(clients.claim())});self.addEventListener("install",function(i){self.skipWaiting()})
self.addEventListener('push',(event)=>{const payload=JSON.parse(event.data.json().data.notification)
let isMac=navigator.platform.toUpperCase().indexOf('MAC')>=0;if(payload.requireInteraction==null){payload.requireInteraction=false;}
let requireInteraction=isMac?false:payload.requireInteraction;event.waitUntil(self.registration.showNotification(payload.title,{...payload,data:payload,requireInteraction:requireInteraction}));if(event.data.json().data.swVersion!=swVersion){console.log("SW Version is different, Updating SW");self.registration.update()}});self.addEventListener('notificationclick',(event)=>{let targetUrl=event.notification.data.url;let apiUrl=event.notification.data.api_url;if(event.action&&event.notification.data.actions[event.action]){targetUrl=event.notification.data.actions[event.action].click_action;apiUrl=event.notification.data.actions[event.action].api_url;}
clients.openWindow(targetUrl);fetch(apiUrl);event.notification.close();});const WorkerMessengerCommand={AMP_SUBSCRIPTION_STATE:'amp-web-push-subscription-state',AMP_SUBSCRIBE:'amp-web-push-subscribe',AMP_UNSUBSCRIBE:'amp-web-push-unsubscribe',};self.addEventListener('message',(event)=>{const{command,url}=event.data;switch(command){case WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE:onMessageReceivedSubscriptionState();break;case WorkerMessengerCommand.AMP_SUBSCRIBE:onMessageReceivedSubscribe(url);break;case WorkerMessengerCommand.AMP_UNSUBSCRIBE:onMessageReceivedUnsubscribe();break;}});function onMessageReceivedSubscriptionState(){let retrievedPushSubscription=null;self.registration.pushManager.getSubscription().then((pushSubscription)=>{retrievedPushSubscription=pushSubscription;if(!pushSubscription){return null;}else{return self.registration.pushManager.permissionState(pushSubscription.options);}}).then((permissionStateOrNull)=>{if(permissionStateOrNull==null){broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE,false);}else{const isSubscribed=!!retrievedPushSubscription&&permissionStateOrNull==="granted";broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIPTION_STATE,isSubscribed);}});}
async function onMessageReceivedSubscribe(url){try{await subscribePushManager(url);}catch(error){console.log("Error in onMessageReceivedSubscribe: ",error);const subscription=await self.registration.pushManager.getSubscription();if(subscription){const successful=await subscription.unsubscribe();if(successful){console.log("Unsubscribed successfully");await subscribePushManager(url);}else{console.log("Unsubscribe failed");}}}}
let promiseChain=Promise.resolve();async function subscribePushManager(url){promiseChain=promiseChain.then(async()=>{await self.registration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:options.vapid_public_key,});broadcastReply(WorkerMessengerCommand.AMP_SUBSCRIBE,null);var newSubscription=await self.registration.pushManager.getSubscription();newSubscription=newSubscription.toJSON();if(firebase.messaging().vapidKey==null){firebase.messaging().usePublicVapidKey(options.vapid_public_key);}
const messaging=firebase.messaging();const token=await messaging.getToken({serviceWorkerRegistration:self.registration,});if((await this.readData("notification_token"))!=token){domain=options.domain;if(http){domain=getDomainAndHostname(url).hostname;}
await fetch(options.api_url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({domain,token,url:url,endpoint:newSubscription.endpoint,auth:newSubscription.keys.auth,p256dh:newSubscription.keys.p256dh,}),}).then(async(res)=>{if(res.status==200){await this.writeData("notification_token",token);console.log("Notification Token Sent.");return res.json();}
console.log("Notification Token Send Error ",res.status);});}}).catch(err=>{console.log('Error:',err);});}
function getDomainAndHostname(url){const urlObj=new URL(url);return{hostname:urlObj.hostname};}
function onMessageReceivedUnsubscribe(){self.registration.pushManager.getSubscription().then((subscription)=>subscription.unsubscribe()).then(()=>{broadcastReply(WorkerMessengerCommand.AMP_UNSUBSCRIBE,null);});}
function broadcastReply(command,payload){self.clients.matchAll().then((clients)=>{for(let i=0;i<clients.length;i++){const client=clients[i];client.postMessage({command,payload,});}});}
openDatabase=()=>{return new Promise((resolve,reject)=>{const request=indexedDB.open("larapushDataBase",1);request.onupgradeneeded=(event)=>{const db=event.target.result;db.createObjectStore("myObjectStore",{keyPath:"id"});};request.onsuccess=(event)=>{resolve(event.target.result);};request.onerror=(event)=>{reject(event.target.error);};});};writeData=async(key,value)=>{const db=await this.openDatabase();const transaction=db.transaction("myObjectStore","readwrite");const objectStore=transaction.objectStore("myObjectStore");const request=objectStore.put({id:key,data:value});return new Promise((resolve,reject)=>{transaction.oncomplete=()=>{resolve();};transaction.onerror=()=>{reject(transaction.error);};});};readData=async(key)=>{const db=await this.openDatabase();const transaction=db.transaction("myObjectStore","readonly");const objectStore=transaction.objectStore("myObjectStore");const request=objectStore.get(key);return new Promise((resolve,reject)=>{request.onsuccess=()=>{resolve(request.result?request.result.data:null);};request.onerror=()=>{reject(request.error);};});};