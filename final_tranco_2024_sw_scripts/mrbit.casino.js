var c=(s,t,e)=>new Promise((r,o)=>{var i=n=>{try{a(e.next(n))}catch(l){o(l)}},m=n=>{try{a(e.throw(n))}catch(l){o(l)}},a=n=>n.done?r(n.value):Promise.resolve(n.value).then(i,m);a((e=e.apply(s,t)).next())});const resolves=new Map,swMessageError=(s,t)=>({$msgId$:s.$msgId$,$error$:t}),httpRequestFromWebWorker=s=>new Promise(t=>c(this,null,function*(){const e=yield s.clone().json(),r=yield(o=>new Promise(i=>c(this,null,function*(){const a=[...yield self.clients.matchAll()].sort((n,l)=>n.url>l.url?-1:n.url<l.url?1:0)[0];if(a){const l=[i,setTimeout(()=>{resolves.delete(o.$msgId$),i(swMessageError(o,"Timeout"))},12e4)];resolves.set(o.$msgId$,l),a.postMessage(o)}else i(swMessageError(o,"NoParty"))})))(e);t(response(JSON.stringify(r),"application/json"))})),response=(s,t)=>new Response(s,{headers:{"content-type":t||"text/html","Cache-Control":"no-store"}});self.oninstall=()=>self.skipWaiting(),self.onactivate=()=>self.clients.claim(),self.onmessage=s=>{const t=s.data,e=resolves.get(t.$msgId$);e&&(resolves.delete(t.$msgId$),clearTimeout(e[1]),e[0](t))},self.onfetch=s=>{const t=s.request,r=new URL(t.url).pathname;r.endsWith("sw.html")?s.respondWith(response('<!DOCTYPE html><html><head><meta charset="utf-8"><script src="./partytown-sandbox-sw.js?v=0.6.2"><\/script></head></html>')):r.endsWith("proxytown")&&s.respondWith(httpRequestFromWebWorker(t))};

//# sourceMappingURL=partytown-sw.js.map