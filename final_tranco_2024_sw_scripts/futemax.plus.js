const CACHE='cache-v1';const ASSETS=['/css/style.css','/js/script.js','/offline/',];self.addEventListener('install',(event)=>{self.skipWaiting();async function addFilesToCache(){const cache=await caches.open(CACHE);await cache.addAll(ASSETS);}
event.waitUntil(addFilesToCache());});self.addEventListener('activate',(event)=>{async function deleteOldCaches(){for(const key of await caches.keys()){if(key!==CACHE)await caches.delete(key);}}
event.waitUntil(deleteOldCaches());});self.addEventListener('fetch',(event)=>{if(event.request.method!=='GET')return;const urlVerify=new URL(event.request.url);if(urlVerify.host!=self.location.host&&(!urlVerify.host.includes("cdnimages")&&!urlVerify.host.includes(".embedmax.com"))&&urlVerify.host!='fonts.googleapis.com')
return;async function respond(){const url=new URL(event.request.url);const cache=await caches.open(CACHE);if(ASSETS.includes(url.pathname)){return cache.match(url.pathname);}
try{const response=await fetch(event.request);if(response.status===200){cache.put(event.request,response.clone());}
return response;}catch(err){const cachePage=await cache.match(event.request);if(cachePage){return cachePage;}else{const destination=event.request.destination;if(destination=='document'){return Response.redirect('/offline/');}else{return new Response(JSON.stringify({type:'redirect',location:'/offline/'}),{status:200,headers:{'Content-Type':'application/json'}});}}}}
event.respondWith(respond());});